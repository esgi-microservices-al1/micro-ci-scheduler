version: '3'

services:
#    rabbitmq:
#        image: rabbitmq:3-management-alpine
#        container_name: rabbitmq
#        env_file: amq.env
#        ports:
#            - '5672:5672'
#            - '15672:15672'
    scheduler-ci:
#        build: ../../Dockerfile
        image: esgimicroci/al1-scheduler
        container_name: scheduler-ci
        env_file: scheduler-ci.env
        ports:
            - 3000:3000
        expose:
          - 3000
        depends_on:
          - mongo_one
          - mongo_two
          - mongo_three
        restart: always

    #
    #  mongo Production mode
    #  with Replica Set
    #
    mongo_keys:
        image: depop/openssl-bats
        volumes:
            - ./mongo-keys:/mongo-conf
        command: 'bash -c "openssl rand -base64 741 > /mongo-conf/mongodb-keyfile; chmod 600 /mongo-conf/mongodb-keyfile; chown 999 /mongo-conf/mongodb-keyfile"'
        restart: always

    mongo_one:
        container_name: scheduler-mongo1
        image: mongo
        env_file:
            - mongo.env
        volumes:
            - ./mongo-keys:/opt/keyfile
            - ./volumes/mongo1:/data/db
        command: mongod --auth --keyFile /opt/keyfile/mongodb-keyfile --replSet mongo-replSet
        depends_on:
            - mongo_keys
        restart: always

    mongo_two:
        container_name: scheduler-mongo2
        image: mongo
        command: mongod --auth --keyFile /opt/keyfile/mongodb-keyfile --replSet mongo-replSet
        env_file:
            - mongo.env
        volumes:
            - ./mongo-keys:/opt/keyfile
            - ./volumes/mongo2:/data/db
        depends_on:
            - mongo_keys
        restart: always

    mongo_three:
        container_name: scheduler-mongo3
        image: mongo
        command: mongod --auth --keyFile /opt/keyfile/mongodb-keyfile --replSet mongo-replSet
        env_file:
            - mongo.env
        volumes:
            - ./mongo-keys:/opt/keyfile
            - ./volumes/mongo3:/data/db
        depends_on:
            - mongo_keys
        restart: always

# Add your networks/volumes/services for your microservice